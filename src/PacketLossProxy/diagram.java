/*
 * diagram.java
 *
 * Created on 21. März 2008, 23:47
 */

package PacketLossProxy;
import java.awt.*;
import java.awt.geom.*;

/**
 *
 * @author  martin
 */
public class diagram extends javax.swing.JPanel {
    
    private Line2D x_axis, y_axis;
    private Line2D lat_axis;
    private Rectangle2D square;
    private Dimension m_dim;
    private double x_max;
    private double y_max;
    private double max_latency;
    private double max_probability;
    private double packet_interval;
    private double expectation_value;
    private double standard_deviation;
    
    private AffineTransform diagram_transform;
    private AffineTransform coord_transform;
    
    
  /** Creates new form diagram */
    public diagram() {
        initComponents();
        
        m_dim = getPreferredSize();
        double height = m_dim.getHeight();
        double width = m_dim.getWidth();
        
        x_max = (float)width;
        y_max = (float)height;
        
        max_latency = 300.0;
        max_probability = 1.0;
        packet_interval = 20.0;
        //x_axis = new Line2D.Double(0, height - 10, width, height - 10);
        //y_axis = new Line2D.Double(10, 0, 10, height);
        //x_axis = new Line2D.Double(0, 10, width, 10);
        //y_axis = new Line2D.Double(10, 0, 10, height);
        square = new Rectangle2D.Double(0, 0, x_max, y_max);
        
        diagram_transform = new AffineTransform();
        diagram_transform.setToIdentity();
        diagram_transform.scale(8, -8);
        diagram_transform.translate(6, height-2);
        //diagram_transform.translate(-0.1 * width, -0.1 * height);

        
        
        coord_transform = new AffineTransform();
        coord_transform.setToIdentity();
        coord_transform.scale(1.0,-1.0);
        coord_transform.translate(0, -width);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 235, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D)g;
        //g2d.setPaint(Color.blue);
        //g2d.setStroke(new BasicStroke(5));


        AffineTransform savetrans = g2d.getTransform();
        drawDiagram(g2d);

        g2d.setTransform(savetrans);

        drawCoordianteSystem(g2d);
        // g2d.draw(square);
        // g2d.translate(x_max / 2, y_max / 2);
        // g2d.scale( 60.0, 60.0);
        // g2d.translate(0.5, 0.5);
        // g2d.transform(diagram_transform);
        g2d.setTransform(savetrans);
        // g2d.transform(coord_transform);
    }

    private void drawDiagram(Graphics2D g2d) {
        g2d.setPaint(Color.green);
        g2d.setStroke(new BasicStroke((float)0.01));
 
        // diagram:
        g2d.translate(0.1 * x_max, 0.9 * y_max);
        g2d.scale( 0.9  * x_max/max_latency, -0.9 * y_max/max_probability);

        // g2d.draw(new Rectangle2D.Double(0.0, 0.0, max_latency, max_probability));       

        // marker for incoming packet interval               
        for(double x = 0; x < max_latency; x = x + packet_interval) {
            g2d.draw(new Line2D.Double(x, 0.0, x, max_probability));
        }
        
        g2d.setPaint(Color.red);
        g2d.draw(new Line2D.Double(expectation_value, 0.0, expectation_value, max_probability));

        
        g2d.setPaint(Color.orange);

        double left_sigma = expectation_value - standard_deviation;
        double right_sigma = expectation_value + standard_deviation;
        
        g2d.draw(new Line2D.Double(left_sigma, 0.0, left_sigma, max_probability));
        g2d.draw(new Line2D.Double(right_sigma, 0.0, right_sigma, max_probability));
        
        AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.5f); 
        g2d.setComposite(ac); 

        g2d.setPaint(Color.red);
 
        double left_border = expectation_value - standard_deviation * Math.sqrt(3);
        double right_border = expectation_value + standard_deviation * Math.sqrt(3);
        // Create a star using a general path object 
        
        
        // max probability in diagram (area must be 1)
        // (right_border - left border) * prob_max = 1
        // prob_max = 1/(right_border - left border)
        double prob_max = 1/(right_border - left_border);
        prob_max = prob_max * max_probability * 10;
        
        GeneralPath p = new GeneralPath(GeneralPath.WIND_NON_ZERO); 
        p.moveTo(left_border ,0.0); 
        p.lineTo(left_border, prob_max); 
        p.lineTo(right_border, prob_max); 
        p.lineTo(right_border, 0.0); 
        p.closePath(); 
        g2d.fill(p);
        
        //g2d.draw(new Line2D.Double(0.0, 0.0, max_latency, 0.0));
        //g2d.draw(new Line2D.Double(max_latency, 0.0, 0.95 * max_latency, 0.02 * max_probability));
        //g2d.draw(new Line2D.Double(max_latency, 0.0, 0.95 * max_latency, -0.02 * max_probability));

        // y-axis
        //g2d.draw(new Line2D.Double(0.0, 0.0, 0.0, max_probability));
        //g2d.draw(new Line2D.Double(0.0, max_probability, 0.02 * max_latency, 0.95 * max_probability));
        //g2d.draw(new Line2D.Double(0.0, max_probability, -0.02 * max_latency, 0.95 * max_probability));

    }
    
    private void drawCoordianteSystem(Graphics2D g2d) {

        g2d.setPaint(Color.blue);
 
        double x_offset = 0.1 * x_max;
        double y_offset = 0.9 * y_max;
        double x_scale = 0.9 * x_max / max_latency;
        double y_scale = 0.9 * y_max / max_probability;

        // coordinate axises with arrows
        //x-axis
        g2d.draw(new Line2D.Double(0.1 * x_max, 0.9 * y_max, x_max, 0.9 * y_max));
        g2d.draw(new Line2D.Double(x_max, 0.9 * y_max, 0.95 * x_max, (0.9 + 0.02) * y_max));
        g2d.draw(new Line2D.Double(x_max, 0.9 * y_max, 0.95 * x_max, (0.9 - 0.02) * y_max));

        // y-axis
        g2d.draw(new Line2D.Double(0.1 * x_max, 0.9 * y_max, 0.1 * x_max, 0));
        g2d.draw(new Line2D.Double(0.1 * x_max, 0, (0.1 + 0.02) * x_max, 0.05 * y_max));
        g2d.draw(new Line2D.Double(0.1 * x_max, 0, (0.1 - 0.02) * x_max, 0.05 * y_max));

        
        // draw ticks on x-axis:
        // half tick length
        double htl1 = 0.005 * y_max;
        double htl5 = 0.01 * y_max;
        double htl10 = 0.02 * y_max;
        int i = 0;
        for(double x = 0; x < max_latency; x = x + max_latency / 30) {
            double htl = htl1;
            if(i%5 == 0 ) { 
                htl = htl5;
            }    
            if(i%10 == 0) {
                htl = htl10;
            }
            g2d.draw(new Line2D.Double((float)(x * x_scale + x_offset), y_offset + htl, (float)(x * x_scale + x_offset), y_offset - htl ));
            i = i+1;
        }
        
        // labels on x-axis:
        for(double x = 0; x < max_latency; x = x + max_latency / 3) {
            String x_label = String.valueOf((int)x);
            // Rectangle2D bounds = x_label.get
            g2d.drawString(x_label, (float)(x * x_scale + x_offset), (float)(0.97 * y_max) );
        }

        g2d.drawString(new String("t/[ms]"), (float)(0.85 * max_latency * x_scale + x_offset), (float)(0.97 * y_max) );
        
      
        
        // draw ticks on y-axis:
        i = 0;
        for(double y = 0; y < max_probability; y = y + max_probability / 20) {
            double htl = htl1;
            if(i%5 == 0 ) { 
                htl = htl5;
            }    
            if(i%10 == 0) {
                htl = htl10;
            }
            g2d.draw(new Line2D.Double((float)(x_offset - htl),  y_offset - y * y_scale, (float)(x_offset + htl), y_offset - y * y_scale));
            i = i+1;
        }
        
        // labels on x-axis:
        for(double x = 0; x < max_latency; x = x + max_latency / 3) {
            String x_label = String.valueOf((int)x);
            // Rectangle2D bounds = x_label.get
            g2d.drawString(x_label, (float)(x * x_scale + x_offset), (float)(0.97 * y_max) );
        }

        g2d.drawString(new String("t/[ms]"), (float)(0.85 * max_latency * x_scale + x_offset), (float)(0.97 * y_max) );

        g2d.setPaint(Color.red);
        g2d.drawString(new String("µ"), (float)(expectation_value * x_scale + x_offset), (float)(0.98 * y_max) );

        g2d.setPaint(Color.orange);

        double left_sigma = expectation_value - standard_deviation;
        double right_sigma = expectation_value + standard_deviation;
        
        g2d.drawString(new String("µ-σ"), (float)(left_sigma * x_scale + x_offset), (float)(0.98 * y_max) );
        g2d.drawString(new String("µ+σ"), (float)(right_sigma * x_scale + x_offset), (float)( y_max) );

        
    }
    
    public void setMaxLatency(double lat) {
        max_latency = lat;
    }
    
    public void setMaxProbability(double prob) {
        max_probability = prob;
    }
    
    public void setIncomingPacketInterval(double interval) {
        packet_interval = interval;
    }
    
    public void setExpectationValue(double e_value) {
        expectation_value = e_value;
    }
    
    public void setStandardDeviation(double std_deviation) {
        standard_deviation = std_deviation;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
