/*
 * PlpView.java
 */

package PacketLossProxy;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.UnknownHostException;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

import java.util.ArrayList;
import java.util.ListIterator;

/**
 * The application's main frame.
 */
public class PlpView extends FrameView {

    public PlpView(SingleFrameApplication app) {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
        
        m_app_cfg = Plp.getApplication().getAppConfig();
        
        packet_loss_slider.setValue((int)(100 * m_app_cfg.getPacketLossRatio()));
        latency_slider.setValue((int)(m_app_cfg.getPacketLatency()));
        jitter_slider.setValue((int)(100 * m_app_cfg.getPacketJitter()));
        
        
        diagram1.setMaxLatency(m_app_cfg.getPacketLatency() * 2);
        diagram1.setMaxProbability(1.0);
        diagram1.setExpectationValue(m_app_cfg.getPacketLatency());
        // panelList = new ArrayList<PlpStreamPanel>();
    }


    
    
    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Plp.getApplication().getMainFrame();
            aboutBox = new PlpAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Plp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        latency_slider = new javax.swing.JSlider();
        packet_loss_slider = new javax.swing.JSlider();
        jitter_slider = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        listenRTCPportTextField = new javax.swing.JTextField();
        listenRTPportTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        destHostTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        destRTCPportTextField = new javax.swing.JTextField();
        destRTPportTextField = new javax.swing.JTextField();
        intervalTextField = new javax.swing.JTextField();
        basePortCheckBox = new javax.swing.JCheckBox();
        diagram1 = new PacketLossProxy.diagram();
        packetloss_ratio_label = new javax.swing.JLabel();
        latency_label = new javax.swing.JLabel();
        jitter_label = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        javax.swing.JMenuItem settingMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jLabel3.setForeground(java.awt.Color.orange);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(PacketLossProxy.Plp.class).getContext().getResourceMap(PlpView.class);
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel2.setForeground(java.awt.Color.red);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        latency_slider.setMajorTickSpacing(100);
        latency_slider.setMaximum(1000);
        latency_slider.setMinorTickSpacing(50);
        latency_slider.setPaintLabels(true);
        latency_slider.setPaintTicks(true);
        latency_slider.setToolTipText(resourceMap.getString("latency_slider.toolTipText")); // NOI18N
        latency_slider.setName("latency_slider"); // NOI18N
        latency_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                latency_sliderStateChanged(evt);
            }
        });

        packet_loss_slider.setMajorTickSpacing(10);
        packet_loss_slider.setMinorTickSpacing(5);
        packet_loss_slider.setPaintLabels(true);
        packet_loss_slider.setPaintTicks(true);
        packet_loss_slider.setToolTipText(resourceMap.getString("packet_loss_slider.toolTipText")); // NOI18N
        packet_loss_slider.setName("packet_loss_slider"); // NOI18N
        packet_loss_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                packet_loss_sliderStateChanged(evt);
            }
        });

        jitter_slider.setMajorTickSpacing(30);
        jitter_slider.setMaximum(300);
        jitter_slider.setMinorTickSpacing(15);
        jitter_slider.setPaintLabels(true);
        jitter_slider.setPaintTicks(true);
        jitter_slider.setName("jitter_slider"); // NOI18N
        jitter_slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jitter_sliderStateChanged(evt);
            }
        });

        jLabel9.setFont(resourceMap.getFont("jLabel9.font")); // NOI18N
        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        listenRTCPportTextField.setText(resourceMap.getString("listenRTCPportTextField.text")); // NOI18N
        listenRTCPportTextField.setEnabled(false);
        listenRTCPportTextField.setName("listenRTCPportTextField"); // NOI18N
        listenRTCPportTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenRTCPportTextFieldActionPerformed(evt);
            }
        });

        listenRTPportTextField.setText(resourceMap.getString("listenRTPportTextField.text")); // NOI18N
        listenRTPportTextField.setInputVerifier(new PortNrInputVerifier());
        listenRTPportTextField.setName("listenRTPportTextField"); // NOI18N
        listenRTPportTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listenRTPportTextFieldActionPerformed(evt);
            }
        });

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel4.setForeground(java.awt.Color.green);
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        applyButton.setText(resourceMap.getString("applyButton.text")); // NOI18N
        applyButton.setName("applyButton"); // NOI18N
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        destHostTextField.setText(resourceMap.getString("destHostTextField.text")); // NOI18N
        destHostTextField.setName("destHostTextField"); // NOI18N
        destHostTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destHostTextFieldActionPerformed(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        destRTCPportTextField.setText(resourceMap.getString("destRTCPportTextField.text")); // NOI18N
        destRTCPportTextField.setEnabled(false);
        destRTCPportTextField.setName("destRTCPportTextField"); // NOI18N
        destRTCPportTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destRTCPportTextFieldActionPerformed(evt);
            }
        });

        destRTPportTextField.setText(resourceMap.getString("destRTPportTextField.text")); // NOI18N
        destRTPportTextField.setName("destRTPportTextField"); // NOI18N
        destRTPportTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destRTPportTextFieldActionPerformed(evt);
            }
        });

        intervalTextField.setText(resourceMap.getString("intervalTextField.text")); // NOI18N
        intervalTextField.setName("intervalTextField"); // NOI18N
        intervalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalTextFieldActionPerformed(evt);
            }
        });

        basePortCheckBox.setSelected(true);
        basePortCheckBox.setText(resourceMap.getString("basePortCheckBox.text")); // NOI18N
        basePortCheckBox.setName("basePortCheckBox"); // NOI18N
        basePortCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basePortCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(applyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(intervalTextField)
                            .addComponent(listenRTCPportTextField)
                            .addComponent(listenRTPportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(destHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(destRTCPportTextField)
                                    .addComponent(destRTPportTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)))
                            .addComponent(basePortCheckBox))))
                .addContainerGap(161, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(listenRTPportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(destRTPportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(listenRTCPportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(destRTCPportTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(destHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(intervalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(applyButton)
                            .addComponent(cancelButton))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(basePortCheckBox)
                        .addContainerGap())))
        );

        diagram1.setName("diagram1"); // NOI18N

        packetloss_ratio_label.setText(resourceMap.getString("packetloss_ratio_label.text")); // NOI18N
        packetloss_ratio_label.setName("packetloss_ratio_label"); // NOI18N

        latency_label.setText(resourceMap.getString("latency_label.text")); // NOI18N
        latency_label.setName("latency_label"); // NOI18N

        jitter_label.setText(resourceMap.getString("jitter_label.text")); // NOI18N
        jitter_label.setName("jitter_label"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(latency_slider, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                                            .addComponent(packet_loss_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jitter_slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jitter_label, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(191, 191, 191)
                                            .addComponent(packetloss_ratio_label, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(18, 18, 18))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(latency_label, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(87, 87, 87)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(diagram1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(398, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(packetloss_ratio_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(packet_loss_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(latency_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(latency_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jitter_label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jitter_slider, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(diagram1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(PacketLossProxy.Plp.class).getContext().getActionMap(PlpView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        settingMenuItem.setAction(actionMap.get("showNetworkSettings")); // NOI18N
        settingMenuItem.setName("settingMenuItem"); // NOI18N
        jMenu1.add(settingMenuItem);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1266, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1082, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void packet_loss_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_packet_loss_sliderStateChanged
        int pos = packet_loss_slider.getValue();
        m_app_cfg.setPacketLossRatio(0.01 * pos);
        packetloss_ratio_label.setText(String.valueOf(pos) + " %");
        //System.out.format("packet_loss_slider: %d\n", pos);// TODO add your handling code here:
}//GEN-LAST:event_packet_loss_sliderStateChanged

    
    private void latency_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_latency_sliderStateChanged
        int pos = latency_slider.getValue();
        m_app_cfg.setPacketLatency((double)pos);
        latency_label.setText(String.valueOf(pos) + " ms");
        adopt_jitter_label();
        //System.out.format("latency_slider:  %d\n", pos);// TODO add your handling code here:
    }//GEN-LAST:event_latency_sliderStateChanged

    private void jitter_sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jitter_sliderStateChanged
        int pos = jitter_slider.getValue();
        double jitter = 0.01 * pos;
        m_app_cfg.setPacketJitter(jitter);
        adopt_jitter_label();
        //double latency = m_app_cfg.getPacketLatency();
        //long jitter_in_ms = (long)(jitter * latency);
        
        //jitter_label.setText(String.valueOf(pos) + " % = " + String.valueOf(jitter_in_ms) + " ms");
        // System.out.format("jitter_slider:  %d\n", pos);// TODO add your handling code here:
    }//GEN-LAST:event_jitter_sliderStateChanged

    private void adopt_jitter_label() {
        
        double jitter = m_app_cfg.getPacketJitter();
        double latency = m_app_cfg.getPacketLatency();
        long jitter_in_ms = (long)(jitter * latency);
        jitter_label.setText(String.valueOf((long)(100 * jitter)) + " % = " + String.valueOf(jitter_in_ms) + " ms");
        
        diagram1.setMaxLatency(2*latency);
        diagram1.setExpectationValue(latency);
        diagram1.setStandardDeviation(jitter_in_ms);
        diagram1.repaint();
    }
    
    
    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        System.out.println("Apply Button pressed");

 
 
        m_app_cfg.setSrcPortRTP(Integer.valueOf( listenRTPportTextField.getText() ).intValue());
        m_app_cfg.setDestPortRTP(Integer.valueOf( destRTPportTextField.getText() ).intValue());
        
        if(basePortCheckBox.isSelected()) {
            m_app_cfg.setSrcPortRTCP(m_app_cfg.getSrcPortRTP() + 1);           
            m_app_cfg.setDestPortRTCP(m_app_cfg.getDestPortRTP() + 1);           
        } 
        else {
            m_app_cfg.setSrcPortRTCP(Integer.valueOf( listenRTCPportTextField.getText() ).intValue());
            m_app_cfg.setDestPortRTCP(Integer.valueOf( destRTCPportTextField.getText() ).intValue());
        }

        m_app_cfg.setDestHost(destHostTextField.getText());
        
        m_app_cfg.setPacketInterval_ms(Integer.valueOf( intervalTextField.getText() ).intValue());
        Plp.getApplication().networkSettingsChanged();
        // TODO add your handling code here:
    }//GEN-LAST:event_applyButtonActionPerformed

    /** 
     * cancel was pressed: return oll settings to the values stored in AppConfig
     * @param evt
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.out.println("Cancel Button pressed");
 
        listenRTPportTextField.setText(Integer.toString(m_app_cfg.getSrcPortRTP()));
        listenRTCPportTextField.setText(Integer.toString(m_app_cfg.getSrcPortRTCP()));

        destRTPportTextField.setText(Integer.toString(m_app_cfg.getDestPortRTP()));
        destRTCPportTextField.setText(Integer.toString(m_app_cfg.getDestPortRTCP()));

        destHostTextField.setText(m_app_cfg.getDestHost());
        
        intervalTextField.setText(Integer.toString(m_app_cfg.getPacketInterval_ms()));

        if(m_app_cfg.getSrcPortRTCP() == m_app_cfg.getSrcPortRTP() + 1 && 
           m_app_cfg.getDestPortRTCP() == m_app_cfg.getDestPortRTP() + 1 ) {
           basePortCheckBox.setSelected(true); 
            
        }
        else {
            basePortCheckBox.setSelected(false);
        }
        adjustRTCPeditable();
        
        listenRTCPportTextField.setText(Integer.toString(m_app_cfg.getSrcPortRTCP()));
        
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void destHostTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destHostTextFieldActionPerformed
        System.out.println("Hostname changed");
        // TODO add your handling code here:
}//GEN-LAST:event_destHostTextFieldActionPerformed

    private void listenRTPportTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenRTPportTextFieldActionPerformed
        System.out.println("listen RTP port changed");
        // TODO add your handling code here:
    }//GEN-LAST:event_listenRTPportTextFieldActionPerformed

    private void listenRTCPportTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listenRTCPportTextFieldActionPerformed
        System.out.println("listen RTCP port changed");
        // TODO add your handling code here:
    }//GEN-LAST:event_listenRTCPportTextFieldActionPerformed

    private void destRTPportTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destRTPportTextFieldActionPerformed
        System.out.println("destination RTP port changed");
        // TODO add your handling code here:
    }//GEN-LAST:event_destRTPportTextFieldActionPerformed

    private void destRTCPportTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destRTCPportTextFieldActionPerformed
        System.out.println("destination RTCP port changed");
        // TODO add your handling code here:
    }//GEN-LAST:event_destRTCPportTextFieldActionPerformed

    private void intervalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalTextFieldActionPerformed
        System.out.println("RTP interval changed");
        // TODO add your handling code here:
    }//GEN-LAST:event_intervalTextFieldActionPerformed

    private void basePortCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basePortCheckBoxActionPerformed
        adjustRTCPeditable();
        // TODO add your handling code here:
}//GEN-LAST:event_basePortCheckBoxActionPerformed

    
    private void adjustRTCPeditable() {
        if(basePortCheckBox.isSelected()) {
            System.out.println("basePort enabled");
            listenRTCPportTextField.setEnabled(false);
            destRTCPportTextField.setEnabled(false);
        }
        else{
            System.out.println("basePort disabled");
            listenRTCPportTextField.setEnabled(true);
            destRTCPportTextField.setEnabled(true);
        } 

    }
    
    public void showSocketErrorDialog(String msg) {
        JFrame mainFrame = Plp.getApplication().getMainFrame();
        JOptionPane.showMessageDialog(mainFrame,
                        msg,
                        "Socket Error",
                         JOptionPane.ERROR_MESSAGE);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JCheckBox basePortCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField destHostTextField;
    private javax.swing.JTextField destRTCPportTextField;
    private javax.swing.JTextField destRTPportTextField;
    private PacketLossProxy.diagram diagram1;
    private javax.swing.JTextField intervalTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jitter_label;
    private javax.swing.JSlider jitter_slider;
    private javax.swing.JLabel latency_label;
    private javax.swing.JSlider latency_slider;
    private javax.swing.JTextField listenRTCPportTextField;
    private javax.swing.JTextField listenRTPportTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSlider packet_loss_slider;
    private javax.swing.JLabel packetloss_ratio_label;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;
    private AppConfig m_app_cfg;

    
    //private PlpStreamPanel plpStreamPanel1;
    //private ArrayList<PlpStreamPanel> panelList;

}
